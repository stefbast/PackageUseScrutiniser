// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PackageUseScrutiniser.Core.Tests.PackageFinderTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SearchingForPackageConfigsContainingAPackageIdFeature : Xunit.IClassFixture<SearchingForPackageConfigsContainingAPackageIdFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GettingPackages.feature"
#line hidden
        
        public SearchingForPackageConfigsContainingAPackageIdFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Searching for package configs containing a package id", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(SearchingForPackageConfigsContainingAPackageIdFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Packages exists with requested package id")]
        [Xunit.TraitAttribute("FeatureTitle", "Searching for package configs containing a package id")]
        [Xunit.TraitAttribute("Description", "Packages exists with requested package id")]
        public virtual void PackagesExistsWithRequestedPackageId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Packages exists with requested package id", ((string[])(null)));
#line 3
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "File name",
                        "content"});
            table1.AddRow(new string[] {
                        "C:\\directory1\\packages.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id 1\" versio" +
                            "n=\"package version 1\"/></packages>"});
            table1.AddRow(new string[] {
                        "C:\\directory2\\packages.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id 2\" versio" +
                            "n=\"other package version\"/></packages>"});
            table1.AddRow(new string[] {
                        "C:\\directory3\\packages.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id 1\" versio" +
                            "n=\"package version 2\"/></packages>"});
#line 4
  testRunner.Given("There are packages.config files with content", ((string)(null)), table1, "Given ");
#line 9
  testRunner.When("getting packages with \"package id 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "package location",
                        "package version"});
            table2.AddRow(new string[] {
                        "C:\\directory1\\",
                        "package version 1"});
            table2.AddRow(new string[] {
                        "C:\\directory3\\",
                        "package version 2"});
#line 10
  testRunner.Then("return packages containing package id", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Packages do not exist with requested package id")]
        [Xunit.TraitAttribute("FeatureTitle", "Searching for package configs containing a package id")]
        [Xunit.TraitAttribute("Description", "Packages do not exist with requested package id")]
        public virtual void PackagesDoNotExistWithRequestedPackageId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Packages do not exist with requested package id", ((string[])(null)));
#line 15
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "File name",
                        "content"});
            table3.AddRow(new string[] {
                        "C:\\directory1\\packages.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id 2\"/></pac" +
                            "kages>"});
            table3.AddRow(new string[] {
                        "C:\\directory2\\packages.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id 3\" /></pa" +
                            "ckages>"});
#line 16
  testRunner.Given("There are packages.config files with content", ((string)(null)), table3, "Given ");
#line 20
  testRunner.When("getting packages with \"package id 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "package location",
                        "package version"});
#line 21
  testRunner.Then("return packages containing package id", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Package does exists with request package id but without version")]
        [Xunit.TraitAttribute("FeatureTitle", "Searching for package configs containing a package id")]
        [Xunit.TraitAttribute("Description", "Package does exists with request package id but without version")]
        public virtual void PackageDoesExistsWithRequestPackageIdButWithoutVersion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Package does exists with request package id but without version", ((string[])(null)));
#line 24
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "File name",
                        "content"});
            table5.AddRow(new string[] {
                        "C:\\directory\\packages.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id\" /></pack" +
                            "ages>"});
#line 25
  testRunner.Given("There are packages.config files with content", ((string)(null)), table5, "Given ");
#line 28
  testRunner.When("getting packages with \"package id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "package location",
                        "package version"});
            table6.AddRow(new string[] {
                        "C:\\directory\\",
                        ""});
#line 29
  testRunner.Then("return packages containing package id", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Package does exists with request package id but in file not named \"packages.confi" +
            "g")]
        [Xunit.TraitAttribute("FeatureTitle", "Searching for package configs containing a package id")]
        [Xunit.TraitAttribute("Description", "Package does exists with request package id but in file not named \"packages.confi" +
            "g")]
        public virtual void PackageDoesExistsWithRequestPackageIdButInFileNotNamedPackages_Config()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Package does exists with request package id but in file not named \"packages.confi" +
                    "g", ((string[])(null)));
#line 33
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "File name",
                        "content"});
            table7.AddRow(new string[] {
                        "C:\\directory\\file.config",
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><package id=\"package id\" /></pack" +
                            "ages>"});
#line 34
  testRunner.Given("There are packages.config files with content", ((string)(null)), table7, "Given ");
#line 37
  testRunner.When("getting packages with \"package id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "package location",
                        "package version"});
#line 38
  testRunner.Then("return packages containing package id", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SearchingForPackageConfigsContainingAPackageIdFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SearchingForPackageConfigsContainingAPackageIdFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
